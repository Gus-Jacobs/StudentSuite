# codemagic.yaml
#
# This workflow is designed for building and publishing the iOS
# release version of your Flutter app to App Store Connect.
# It leverages Codemagic's automatic code signing using an App Store Connect API Key.

workflows:
  ios-release-build:
    name: iOS Release Build
    instance_type: mac_mini_m1 # Requires a Mac instance for iOS builds

    # --- Environment Variables ---
    environment:
      flutter: stable         # Specifies the Flutter channel to use
      xcode: latest           # Uses the latest available Xcode version on Codemagic
      cocoapods: default      # Uses the default CocoaPods version

      # Link the variable group where IOS_BUNDLE_ID and CERTIFICATE_PRIVATE_KEY are stored
      # This MUST match the name of your Variable Group in Codemagic UI.
      groups:
        - variables 

    # --- Integrations ---
    # This section links your workflow to the App Store Connect API Key configured in Codemagic UI.
    # It tells Codemagic which key to use for fetching signing files and publishing.
    integrations:
      app_store_connect: "Codemagic Integration Key" # Replace with the exact name of your API key in Codemagic Integrations

    # --- Triggering ---
    triggering:
      branch_patterns:
        - pattern: 'main' # Trigger this release build workflow on pushes to the 'main' branch
          include: true

    # --- Build Steps (Scripts) ---
    scripts:
      - name: Set up Flutter
        script: |
          echo "Setting up Flutter..."
          flutter channel $FLUTTER_CHANNEL
          flutter upgrade
          flutter doctor

      - name: Clean and Regenerate iOS Podfile
        script: |
          echo "Starting aggressive iOS build artifact cleanup..."
          cd $CM_BUILD_DIR # Ensure we are at the root of the Flutter project

          # Remove all potentially problematic iOS build artifacts
          rm -rf ios/Pods/
          rm -f ios/Podfile
          rm -f ios/Podfile.lock
          rm -rf ios/.symlinks/
          rm -rf ios/Runner.xcworkspace/
          flutter clean
          
          echo "Running flutter pub get to regenerate Podfile and install pods..."
          flutter pub get
          
          echo "Patching Podfile to set iOS deployment target to 15.0..."
          if grep -q "platform :ios," ios/Podfile; then
              sed -i '' "s/^#* *platform :ios, '\(.*\)'/platform :ios, '15.0'/" ios/Podfile
          else
              sed -i '' "/# Uncomment this line to define a global platform for your project/a\platform :ios, '15.0'" ios/Podfile
          fi
          echo "Verifying Podfile content after patch:"
          cat ios/Podfile | grep "platform :ios"

      - name: Fetch iOS signing files
        script: |
          echo "Using Main App Bundle ID for signing: ${IOS_BUNDLE_ID}"
          echo "Using Test Target Bundle ID for signing: ${IOS_BUNDLE_ID}.RunnerTests" 

          # Fetch iOS App Store Distribution files for the main app (for release)
          app-store-connect fetch-signing-files "${IOS_BUNDLE_ID}" \
            --type IOS_APP_STORE \
            --create
          
          # Fetch iOS App DEVELOPMENT files for the test target
          app-store-connect fetch-signing-files "${IOS_BUNDLE_ID}.RunnerTests" \
            --type IOS_APP_DEVELOPMENT \
            --create
          
          # No need to extract UUID or Cert Name here manually.
          # xcode-project use-profiles --export-options-plist will handle it.

      - name: Apply Xcode code signing settings and Generate ExportOptions.plist
        script: |
          echo "Applying fetched code signing profiles to Xcode project and keychain..."
          # This command ensures the fetched certificates are added to the keychain
          # and the profiles are installed for Xcode to find.
          keychain add-certificates # Explicitly add certificates to the keychain
          
          # This command configures the Xcode project to use the fetched profiles
          # AND generates the export_options.plist with the correct details.
          xcode-project use-profiles \
            --export-options-path "$CM_BUILD_DIR/ios/export_options.plist" \
            --export-method "app-store" # Specify the export method here
          
          echo "Generated export_options.plist content:"
          cat "$CM_BUILD_DIR/ios/export_options.plist"

      - name: Build iOS App (IPA)
        script: |
          echo "Starting iOS IPA build..."
          # Build the iOS application package (IPA) for release.
          flutter build ipa --release \
            --obfuscate --split-debug-info=./debug_info \
            --export-options-plist="$CM_BUILD_DIR/ios/export_options.plist" # Tell flutter build to use this plist
          
    # --- Artifacts ---
    # Specifies which files to save as build artifacts after the workflow completes.
    artifacts:
      # This is the most common output path for flutter build ipa
      # If your logs from 'Build iOS App (IPA)' show a different path, update this.
      - build/ios/ipa/Runner.ipa 

    # --- Publishing ---
    # Configures post-build actions, such as email notifications and App Store Connect uploads.
    publishing:
      email:
        recipients:
          - pegumaxinc@gmail.com
        notify:
          success: true
          failure: true

      # --- App Store Connect Publishing (for iOS) ---
      # This block uploads the generated iOS IPA to App Store Connect.
      app_store_connect:
        auth: integration # Uses the App Store Connect API key configured in Codemagic Integrations
        # Uncomment the line below after you confirm the IPA is built and uploaded successfully
        # and you're ready to test on TestFlight.
        # submit_to_testflight: true
        # To manage build numbers:
        #   source: codemagic # Codemagic assigns a unique build number
        # version_number:
        #   source: project # Uses version from pubspec.yaml and Info.plist
        # To automatically submit to the App Store (after TestFlight testing):
        # submit_to_app_store: true
        # release_type: manual # or automatic (manual is safer initially)
