# codemagic.yaml
workflows:
  ios-macos-release-build:
    name: iOS & macOS Release Build
    instance_type: mac_mini_m1 # Use a Mac instance for Apple builds

    # --- Environment Variables ---
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default

      # Environment variables for Firebase and Apple signing
      # You MUST set these in Codemagic UI under Environment variables -> Secure files
      # Example:
      # FLUTTER_APP_FIREBASE_API_KEY:
      # FLUTTER_APP_FIREBASE_APP_ID:
      # FLUTTER_APP_FIREBASE_MESSAGING_SENDER_ID:
      # FLUTTER_APP_FIREBASE_PROJECT_ID:
      # FLUTTER_APP_FIREBASE_STORAGE_BUCKET:

      # IMPORTANT: Your Bundle ID (com.pegumax.studentsuite)
      # This should be set as an Environment Variable in Codemagic UI, e.g.,
      # Variable Name: IOS_BUNDLE_ID
      # Variable Value: com.pegumax.studentsuite
      # Variable Group: (optional, but good practice for organization)
      # Make sure the name 'IOS_BUNDLE_ID' matches what's used here.

      # Reference your App Store Connect API Key by its name as defined in Codemagic Integrations
      # The name you provided was "Codemagic Integration Key"
      APP_STORE_CONNECT_KEY_NAME: "Codemagic Integration Key"


    # --- Triggering Syntax ---
    triggering:
      branch_patterns:
        - pattern: 'main' # Trigger on pushes to the 'main' branch for releases
          include: true
        # You can add a 'develop' or 'feature/*' branch here if you want test builds
        # to also run iOS and macOS together for development.
        # - pattern: 'develop'
        #   include: true

    scripts:
      - name: Set up Flutter
        script: |
          flutter channel $FLUTTER_CHANNEL
          flutter upgrade
          flutter doctor
      - name: Get dependencies
        script: flutter pub get

      # Install CocoaPods dependencies for iOS
      - name: Install iOS Pods
        script: |
          cd ios
          pod install
          cd ..

      # --- iOS Code Signing Configuration ---
      # This step handles certificates and provisioning profiles for iOS App Store distribution
      - name: Set up iOS code signing for App Store
        script: |
          xcode-project manage-profiles \
            --action fetch \
            --bundle-id "${IOS_BUNDLE_ID}" \
            --type IOS_APP_STORE \
            --api-key-name "${APP_STORE_CONNECT_KEY_NAME}" # Reference the API key name here

      # --- macOS Code Signing Configuration ---
      # This step handles certificates and provisioning profiles for macOS App Store distribution
      # Note: macOS App Store Connect publishing is separate from iOS.
      # For macOS, you usually need a "Mac App Distribution" certificate and a "Mac App Store" provisioning profile.
      - name: Set up macOS code signing for App Store
        script: |
          xcode-project manage-profiles \
            --action fetch \
            --bundle-id "${IOS_BUNDLE_ID}" \
            --type MAC_APP_STORE \
            --api-key-name "${APP_STORE_CONNECT_KEY_NAME}" # Reference the API key name here

      # Build for iOS
      - name: Build iOS App
        script: |
          flutter build ipa --release \
            --obfuscate --split-debug-info=./debug_info \
            --bundle-id "${IOS_BUNDLE_ID}" # Ensure bundle ID is explicitly set for ipa build

      # Build for macOS
      - name: Build macOS App
        script: |
          flutter build macos --release \
            --obfuscate --split-debug-info=./debug_info \
            --target-platform macos-x64 # Specify platform if needed
          # Ensure your macOS project in Xcode has the correct Bundle Identifier and signing settings
          # You might also need to sign the macOS app bundle separately if flutter build macos --release
          # doesn't handle all aspects of signing required for notarization/App Store.
          # For notarization, you'd typically use `xcodebuild -exportArchive` and then `notarytool`
          # but Codemagic's `app_store_connect` for macOS handles some of this.

    # --- Artifacts Definition ---
    artifacts:
      - build/ios/Runner.ipa # The iOS App Store / TestFlight distributable
      - build/macos/Build/Products/Release/*.app.zip # The macOS app bundle, zipped for download

    # --- Publishing Section ---
    publishing:
      email:
        recipients:
          - pegumaxinc@gmail.com # Replace with your actual email
        notify:
          success: true
          failure: true

      # --- Publish to App Store Connect (for iOS) ---
      app_store_connect:
        api_key:
          name: "${APP_STORE_CONNECT_KEY_NAME}" # Reference the API key name variable
        # For iOS, you typically upload to App Store Connect first (which includes TestFlight)
        # submit_to_testflight: true # Uncomment to submit to TestFlight automatically
        # build_number:
        #   source: codemagic # or app_store, or xcode (depends on your versioning strategy)
        # version_number:
        #   source: project # or app_store
        # submit_to_app_store: true # Only enable after TestFlight testing is complete
        # release_type: manual # or automatic

      # --- Publish to App Store Connect (for macOS) ---
      # NOTE: macOS App Store Connect publishing is a separate block from iOS.
      # You'll need to configure this similarly to iOS, but specifically for macOS.
      # This part is more complex and often requires additional steps like notarization
      # which might not be fully automated out-of-the-box with simple app_store_connect block.
      # It's highly recommended to get iOS publishing working first, then tackle macOS.
      # For now, I'll leave a placeholder. You might need custom scripts for macOS notarization and upload.
      # app_store_connect_macos: # This is just a placeholder name, Codemagic uses the same 'app_store_connect' key
      #   api_key:
      #     name: "${APP_STORE_CONNECT_KEY_NAME}"
      #   # Additional macOS specific publishing options would go here
      #   # This would typically be configured within Codemagic UI for the macOS target
      #   # or require custom publishing scripts if you need notarization.
