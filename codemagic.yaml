echo "Using Main App Bundle ID for signing: ${IOS_BUNDLE_ID}"
echo "Using Test Target Bundle ID for signing: ${IOS_BUNDLE_ID}.RunnerTests" 

# Fetch iOS App Store Distribution files for the main app (for release)
app-store-connect fetch-signing-files "${IOS_BUNDLE_ID}" \
  --type IOS_APP_STORE \
  --create

# Fetch iOS App DEVELOPMENT files for the test target
app-store-connect fetch-signing-files "${IOS_BUNDLE_ID}.RunnerTests" \
  --type IOS_APP_DEVELOPMENT \
  --create

# --- NEW ROBUST WAY TO GET PROFILE UUID from the file itself ---
# Loop through all saved App Store provisioning profiles and find the one matching our bundle ID
APP_STORE_PROFILE_PATH=""
PROVISIONING_PROFILE_DIR="/Users/builder/Library/MobileDevice/Provisioning Profiles/"

# Find all App Store profiles (based on typical naming convention)
for profile_file in "$PROVISIONING_PROFILE_DIR"/IOS_APP_STORE_*.mobileprovision; do
  if [ -f "$profile_file" ]; then # Ensure it's a file
    echo "Checking profile: $profile_file"
    # Dump the profile content and check for BundleIdentifier and AppStore method
    if security cms -D -i "$profile_file" 2>/dev/null | grep -q "<key>BundleIdentifier</key><string>${IOS_BUNDLE_ID}</string>"; then
      if security cms -D -i "$profile_file" 2>/dev/null | grep -q "<key>ProvisionsAllDevices</key>"; then # This usually means App Store or Ad Hoc
        # Further check for specific App Store (or if only App Store profiles are fetched, this might be enough)
        # Assuming only relevant profiles are fetched by app-store-connect tool
        APP_STORE_PROFILE_PATH="$profile_file"
        break # Found our profile, exit loop
      fi
    fi
  fi
done

if [ -z "$APP_STORE_PROFILE_PATH" ]; then
  echo "Error: Could not find the saved App Store provisioning profile for bundle ID ${IOS_BUNDLE_ID}. Check App Store Connect integration and bundle ID."
  echo "Contents of Provisioning Profiles directory:"
  ls -la "$PROVISIONING_PROFILE_DIR"
  exit 1
fi
echo "Found App Store Profile Path: $APP_STORE_PROFILE_PATH"

# Extract the UUID from the .mobileprovision file using security cms
# The UUID is a standard UUID format (8-4-4-4-12 hex characters)
APP_STORE_PROFILE_UUID=$(security cms -D -i "$APP_STORE_PROFILE_PATH" | grep UUID -A 1 | grep -oE '[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}')

if [ -z "$APP_STORE_PROFILE_UUID" ]; then
  echo "Error: Could not extract UUID from profile file: $APP_STORE_PROFILE_PATH"
  security cms -D -i "$APP_STORE_PROFILE_PATH" # Print content for debugging
  exit 1
fi
echo "Extracted App Store Profile UUID: $APP_STORE_PROFILE_UUID"

# Get the exact name of the iOS Distribution certificate.
# This assumes you have one 'Apple Distribution' certificate available.
IOS_DISTRIBUTION_CERT_NAME=$(security find-identity -p codesigning -v | grep "Apple Distribution" | head -1 | sed -E 's/.*"(Apple Distribution: .*)"/\1/')
if [ -z "$IOS_DISTRIBUTION_CERT_NAME" ]; then
  echo "Error: Could not find iOS Distribution certificate name. Ensure a valid 'Apple Distribution' certificate is available via your App Store Connect API Key."
  exit 1
fi
echo "Found iOS Distribution Certificate Name: '$IOS_DISTRIBUTION_CERT_NAME'"

# Export these variables so they are available in subsequent steps in this workflow
echo "export APP_STORE_PROFILE_UUID=$APP_STORE_PROFILE_UUID" >> "$CM_ENV"
echo "export IOS_DISTRIBUTION_CERT_NAME='$IOS_DISTRIBUTION_CERT_NAME'" >> "$CM_ENV"
