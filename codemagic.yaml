# codemagic.yaml
#
# This workflow is designed for building and publishing both iOS and macOS
# release versions of your Flutter app to App Store Connect.
# It leverages Codemagic's automatic code signing using an App Store Connect API Key.

workflows:
  ios-macos-release-build:
    name: iOS & macOS Release Build
    instance_type: mac_mini_m1 # Use a Mac instance for Apple builds (required for iOS/macOS)

    # --- Environment Variables ---
    # These variables configure the build environment.
    # IMPORTANT: Ensure IOS_BUNDLE_ID and CERTIFICATE_PRIVATE_KEY are set in
    # Codemagic UI Environment Variables, and that your "variables" group is linked.
    environment:
      flutter: stable       # Specifies the Flutter channel to use
      xcode: latest         # Uses the latest available Xcode version on Codemagic
      cocoapods: default    # Uses the default CocoaPods version

      # Link the variable group where IOS_BUNDLE_ID and CERTIFICATE_PRIVATE_KEY are stored
      # This MUST match the name of your Variable Group in Codemagic UI.
      groups:
        - variables 

      # Firebase Environment Variables (if your app uses Firebase)
      # If these are also in your "variables" group, they will be loaded.
      # FLUTTER_APP_FIREBASE_API_KEY: your_api_key
      # FLUTTER_APP_FIREBASE_APP_ID: your_app_id
      # FLUTTER_APP_FIREBASE_MESSAGING_SENDER_ID: your_Messaginger_id
      # FLUTTER_APP_FIREBASE_PROJECT_ID: your_project_id
      # FLUTTER_APP_FIREBASE_STORAGE_BUCKET: your_storage_bucket

    # --- Integrations ---
    # This section links your workflow to the App Store Connect API Key configured in Codemagic UI.
    # It tells Codemagic which key to use for fetching signing files and publishing.
    integrations:
      app_store_connect: "Codemagic Integration Key" # Replace with the exact name of your API key in Codemagic Integrations

    # --- Triggering ---
    # Defines when this workflow should be triggered.
    triggering:
      branch_patterns:
        - pattern: 'main' # Trigger this release build workflow on pushes to the 'main' branch
          include: true

    # --- Build Steps (Scripts) ---
    # The sequence of commands to execute during the build.
    scripts:
      - name: Set up Flutter
        script: |
          # Set the Flutter channel, upgrade, and run doctor for diagnostics
          flutter channel $FLUTTER_CHANNEL
          flutter upgrade
          flutter doctor

      - name: Get dependencies
        script: |
          # Fetch Flutter package dependencies
          flutter pub get

      - name: Install iOS Pods
        script: |
          # Navigate to the iOS project directory and install CocoaPods dependencies
          cd ios
          pod install
          cd .. # Navigate back to the root of the Flutter project

      - name: Fetch iOS and macOS signing files
        script: |
          # Debugging: Print the bundle ID to confirm it's available
          echo "Using Main App Bundle ID for signing: ${IOS_BUNDLE_ID}"
          echo "Using Test Target Bundle ID for signing: ${IOS_BUNDLE_ID}.RunnerTests" 
          
          # Fetch iOS App Store Distribution files (certificate and provisioning profile)
          # Provide both the main app bundle ID and the test target bundle ID.
          app-store-connect fetch-signing-files "${IOS_BUNDLE_ID}" "${IOS_BUNDLE_ID}.RunnerTests" \
            --type IOS_APP_STORE \
            --create
          
          # Fetch macOS App Store Distribution files (certificate and provisioning profile)
          # macOS app's test targets also need proper provisioning if they exist.
          # Assuming macOS also has a similar test target structure.
          app-store-connect fetch-signing-files "${IOS_BUNDLE_ID}" "${IOS_BUNDLE_ID}.RunnerTests" \
            --platform MAC_OS \
            --type MAC_APP_STORE \
            --create

      - name: Build iOS App (IPA)
        script: |
          # Build the iOS application package (IPA) for release.
          # Note: --bundle-id is NOT a valid option for `flutter build ipa`.
          # The bundle ID is configured in your Xcode project's files (e.g., project.pbxproj).
          flutter build ipa --release \
            --obfuscate --split-debug-info=./debug_info

      - name: Build macOS App
        script: |
          # Build the macOS application bundle for release.
          # --release: Builds a release version.
          # --obfuscate, --split-debug-info: For code obfuscation and debug info separation.
          # --target-platform macos-x64: Targets Intel macOS. Remove if you want a universal binary by default on M1/M2.
          flutter build macos --release \
            --obfuscate --split-debug-info=./debug_info \
            --target-platform macos-x64

    # --- Artifacts ---
    # Specifies which files to save as build artifacts after the workflow completes.
    artifacts:
      - build/ios/Runner.ipa # The generated iOS App Store / TestFlight distributable
      - build/macos/Build/Products/Release/*.app.zip # The macOS app bundle, zipped for download

    # --- Publishing ---
    # Configures post-build actions, such as email notifications and App Store Connect uploads.
    publishing:
      email:
        recipients:
          - pegumaxinc@gmail.com # Replace with your actual email address
        notify:
          success: true # Notify on successful builds
          failure: true # Notify on failed builds

      # --- App Store Connect Publishing (for iOS) ---
      # This block uploads the generated iOS IPA to App Store Connect.
      app_store_connect:
        auth: integration # Instructs Codemagic to use the App Store Connect API Key linked via 'integrations'
        # To automatically submit to TestFlight after upload, uncomment the line below:
        # submit_to_testflight: true
        # To manage build numbers:
        # build_number:
        #   source: codemagic # Codemagic assigns a unique build number
        # version_number:
        #   source: project # Uses version from pubspec.yaml and Info.plist
        # To automatically submit to the App Store (after TestFlight testing):
        # submit_to_app_store: true
        # release_type: manual # or automatic (manual is safer initially)

      # --- macOS App Store Connect Publishing (Advanced - Placeholder) ---
      # Note: Publishing macOS apps to the Mac App Store is more involved than iOS.
      # It often requires additional steps like notarization using `notarytool`
      # and specific `altool` or `app_store_connect` commands for macOS.
      # The standard `app_store_connect` block primarily handles iOS IPAs.
      # For now, this YAML will build the macOS app and save it as an artifact.
      # You would then manually upload and notarize it via App Store Connect or Xcode.
