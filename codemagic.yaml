# codemagic.yaml
#
# This workflow is designed for building and publishing the iOS
# release version of your Flutter app to App Store Connect.
# It leverages Codemagic's automatic code signing using an App Store Connect API Key.

workflows:
  ios-release-build:
    name: iOS Release Build
    instance_type: mac_mini_m1 # Requires a Mac instance for iOS builds

    # --- Environment Variables ---
    environment:
      flutter: stable         # Specifies the Flutter channel to use
      xcode: latest           # Uses the latest available Xcode version on Codemagic
      cocoapods: default      # Uses the default CocoaPods version

      # Link the variable group where IOS_BUNDLE_ID and CERTIFICATE_PRIVATE_KEY are stored
      # IMPORTANT: If you are using App Store Connect API Key integration,
      # ensure CERTIFICATE_PRIVATE_KEY is NOT set in your Codemagic UI Environment Variables.
      groups:
        - variables 

    # --- Integrations ---
    # This section links your workflow to the App Store Connect API Key configured in Codemagic UI.
    # It tells Codemagic which key to use for fetching signing files and publishing.
    integrations:
      app_store_connect: "Codemagic Integration Key" # Replace with the exact name of your API key in Codemagic Integrations

    # --- Triggering ---
    triggering:
      branch_patterns:
        - pattern: 'main' # Trigger this release build workflow on pushes to the 'main' branch
          include: true

    # --- Build Steps (Scripts) ---
    scripts:
      - name: Set up Flutter
        script: |
          echo "Setting up Flutter..."
          flutter channel $FLUTTER_CHANNEL
          flutter upgrade
          flutter doctor

      - name: Clean and Regenerate iOS Podfile
        script: |
          echo "Starting aggressive iOS build artifact cleanup..."
          cd $CM_BUILD_DIR # Ensure we are at the root of the Flutter project

          # Remove all potentially problematic iOS build artifacts
          rm -rf ios/Pods/
          rm -f ios/Podfile
          rm -f ios/Podfile.lock
          rm -rf ios/.symlinks/
          rm -rf ios/Runner.xcworkspace/
          flutter clean
          
          echo "Running flutter pub get to regenerate Podfile and install pods..."
          flutter pub get
          
          echo "Patching Podfile to set iOS deployment target to 15.0..."
          if grep -q "platform :ios," ios/Podfile; then
              sed -i '' "s/^#* *platform :ios, '\(.*\)'/platform :ios, '15.0'/" ios/Podfile
          else
              sed -i '' "/# Uncomment this line to define a global platform for your project/a\platform :ios, '15.0'" ios/Podfile
          fi
          echo "Verifying Podfile content after patch:"
          cat ios/Podfile | grep "platform :ios"

      - name: Fetch iOS signing files and get profile UUID/Cert Name
        script: |
          echo "Using Main App Bundle ID for signing: ${IOS_BUNDLE_ID}"
          echo "Using Test Target Bundle ID for signing: ${IOS_BUNDLE_ID}.RunnerTests" 

          # Fetch iOS App Store Distribution files for the main app (for release)
          # Capture the full output of the fetch command to parse it.
          APP_STORE_FETCH_OUTPUT=$(app-store-connect fetch-signing-files "${IOS_BUNDLE_ID}" \
            --type IOS_APP_STORE \
            --create)
          echo "$APP_STORE_FETCH_OUTPUT" # Print the output for debugging

          # Extract the 10-character alphanumeric profile ID (UUID) from the "Saved Profile" line.
          # We look for the line that explicitly saves the main app's App Store profile,
          # using a pattern observed in your logs ("Student Suite app").
          APP_STORE_PROFILE_UUID=$(echo "$APP_STORE_FETCH_OUTPUT" | grep "Saved Profile IOS_APP_STORE Student Suite app" | grep -oE '\(([0-9A-Z]{10})\)' | head -1 | sed 's/[()]//g')
          
          # Fallback: if the specific "Student Suite app" string isn't found for some reason,
          # try to extract from any saved App Store profile line for the main bundle ID.
          if [ -z "$APP_STORE_PROFILE_UUID" ]; then
            APP_STORE_PROFILE_UUID=$(echo "$APP_STORE_FETCH_OUTPUT" | grep "Saved Profile IOS_APP_STORE" | grep "${IOS_BUNDLE_ID}" | grep -oE '\(([0-9A-Z]{10})\)' | head -1 | sed 's/[()]//g')
          fi

          if [ -z "$APP_STORE_PROFILE_UUID" ]; then
            echo "Error: Could not fetch App Store provisioning profile UUID. Check App Store Connect integration and bundle ID. Raw output was: $APP_STORE_FETCH_OUTPUT"
            exit 1
          fi
          echo "Extracted App Store Profile UUID: $APP_STORE_PROFILE_UUID"
          
          # Fetch iOS App DEVELOPMENT files for the test target
          app-store-connect fetch-signing-files "${IOS_BUNDLE_ID}.RunnerTests" \
            --type IOS_APP_DEVELOPMENT \
            --create
          
          # Get the exact name of the iOS Distribution certificate.
          # This assumes you have one 'Apple Distribution' certificate available.
          IOS_DISTRIBUTION_CERT_NAME=$(security find-identity -p codesigning -v | grep "Apple Distribution" | head -1 | sed -E 's/.*"(Apple Distribution: .*)"/\1/')
          if [ -z "$IOS_DISTRIBUTION_CERT_NAME" ]; then
            echo "Error: Could not find iOS Distribution certificate name. Ensure a valid 'Apple Distribution' certificate is available via your App Store Connect API Key."
            exit 1
          fi
          echo "Found iOS Distribution Certificate Name: $IOS_DISTRIBUTION_CERT_NAME"

          # Export these variables so they are available in subsequent steps in this workflow
          echo "export APP_STORE_PROFILE_UUID=$APP_STORE_PROFILE_UUID" >> $CM_ENV
          echo "export IOS_DISTRIBUTION_CERT_NAME='$IOS_DISTRIBUTION_CERT_NAME'" >> $CM_ENV

      - name: Apply Xcode code signing settings
        script: |
          echo "Applying fetched code signing profiles to Xcode project and keychain..."
          # This command ensures the fetched certificates are added to the keychain
          # and the profiles are installed for Xcode to find.
          keychain add-certificates # Explicitly add certificates to the keychain
          
          # This configures the Xcode project to use the profiles for the build.
          # Note: The xcode-project use-profiles command does not support
          # --export-options-path or --export-method in this Codemagic version.
          xcode-project use-profiles

      - name: Create ExportOptions.plist
        script: |
          echo "Manually creating ExportOptions.plist for App Store distribution..."
          # Use the captured UUID and certificate name to construct the plist.
          cat << EOF > "$CM_BUILD_DIR/ios/export_options.plist"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>26499NZDJJ</string> <key>uploadBitcode</key>
            <true/>
            <key>uploadSymbols</key>
            <true/>
            <key>signingCertificate</key>
            <string>$IOS_DISTRIBUTION_CERT_NAME</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${IOS_BUNDLE_ID}</key>
              <string>$APP_STORE_PROFILE_UUID</string>
            </dict>
          </dict>
          </plist>
          EOF
          echo "Generated export_options.plist content:"
          cat "$CM_BUILD_DIR/ios/export_options.plist"

      - name: Build iOS App (IPA)
        script: |
          echo "Starting iOS IPA build..."
          # Build the iOS application package (IPA) for release.
          flutter build ipa --release \
            --obfuscate --split-debug-info=./debug_info \
            --export-options-plist="$CM_BUILD_DIR/ios/export_options.plist" # Tell flutter build to use this plist
          
    # --- Artifacts ---
    # Specifies which files to save as build artifacts after the workflow completes.
    artifacts:
      # This is the most common output path for flutter build ipa
      # If your logs from 'Build iOS App (IPA)' show a different path, update this.
      - build/ios/ipa/Runner.ipa 

    # --- Publishing ---
    # Configures post-build actions, such as email notifications and App Store Connect uploads.
    publishing:
      email:
        recipients:
          - pegumaxinc@gmail.com
        notify:
          success: true
          failure: true

      # --- App Store Connect Publishing (for iOS) ---
      # This block uploads the generated iOS IPA to App Store Connect.
      app_store_connect:
        auth: integration # Uses the App Store Connect API key configured in Codemagic Integrations
        # Uncomment the line below after you confirm the IPA is built and uploaded successfully
        # and you're ready to test on TestFlight.
        # submit_to_testflight: true
        # To manage build numbers:
        #   source: codemagic # Codemagic assigns a unique build number
        # version_number:
        #   source: project # Uses version from pubspec.yaml and Info.plist
        # To automatically submit to the App Store (after TestFlight testing):
        # submit_to_app_store: true
        # release_type: manual # or automatic (manual is safer initially)
